{
  "ramblings": [
    {
      "title": "A few thoughts on making this page",
      "text": "Some things I learnt and a few thoughts I had while making this page.\nI tried a few different ways to implement the card display and ultimately settled on using scroll to trigger drawing and stashing the cards. At first I tried keeping a container element at a single position and trigger the corresponding card effects when moving above or below certain points and then snap back to the fixed position. This gave the animation a nice elastic bouncing effect but with the different ways scroll is implemented across browsers it was more trouble than it was worth. Touch events were ok, but then I had to account for scroll events anyway so might as well ditch everything and just use scroll as the control for the app.\nWhile the card transitions are triggered by scroll events, most of the actual work is done outside of the listener to ensure that the app will not become choppy or unresponsive. Once certain conditions are met an item(an async function) is created and added to a queue with the cards to be processed. The queue automatically handles the items added and calls them sequentially, waiting until the current one is finished before calling the next. This way no matter how many items are created by the scroll events, the rate that they are processed will always remain constant. With everything happening inside a single queue, timing the animations becomes trivial and controlling the flow also becomes a lot easier, such as just emptying the entire queue when changing scroll directions.\nMy favourite part of the whole thing is probably the ability to stop the animation by scrolling in the opposite direction, the code for it is super simple yet it just works so well. While the animation might be playing for the 5th card, the index and the queue could already be up to the 10th card depending on the scrolling speed. By adding a callback to the queue items with the index and scroll position when the item was first queued I can then use these references to set the scroll position and index to the last item that was poll creating a seamless transition.\nThe navigation for the tabs on larger screens uses a setTimeout for the deck closing animation, this creates opportunities where a sort of race condition can occur when the tabs are clicked too fast. When navigating away from the projects tab, if the animation hasn’t finished playing the first tab clicked will always render at the end no matter how many tabs are clicked afterwards. One way to solve this was to make it so you can’t click on another tab until the first clicked tab has loaded, but this makes the UI clunky and unresponsive. The solution I used was to keep track of the latest clicked tab on a variable, storing it as the property value of an object. By passing the object when this value is requested it will always reflect the latest tab selected(very similar to the useRef hook in React). Any tab to be rendered has to match the value in this variable otherwise it’s discarded, this way only the last tab clicked will be rendered. …thought a better method would probably be where setTimeout isn’t needed at all.\nThe overlapping card effect was surprisingly easy to implement, have one element containing all the details of the card and then have an outer element that wraps around this element. Set the width of the outer element smaller than the width of the card and the browser takes care of the rest, now you have an inline overlapping card effect without doing anything else. To implement an expanding card effect a bit of JS is needed, the width of each line of cards needsto be calculated and assigned. The width needs to be a size where there’s enough space for a card to fully expand into but not enough that it can fit in an extra card, otherwise the UI will jump all over the place due to line wrapping every time a card expands."
    }
  ]
}