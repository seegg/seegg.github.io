{
  "ramblings": [
    {
      "title": "A few thoughts on making this page",
      "text": "A few things I learnt and a some thoughts I had while making this page.\nI tried a few different ways to implement the card display and ultimately settled on using scroll to trigger drawing and stashing the cards. At first I tried keeping a container element at a single position and trigger the corresponding card effects when moving above or below certain points and then snap back to the fixed position. This gave the animation a nice elastic bouncing effect but with the different ways scroll is implemented across browsers it was more trouble than it was worth. Touch events were ok, but then scroll events have to be accounted for anyway so might as well ditch everything and just use scroll events for control.\nWhile the card transitions are triggered by scroll events, most of the actual work is done outside of the listener to ensure that the app will not become choppy or unresponsive. Once certain conditions are met an item(async function) is created and added to a queue with the cards to be processed. The queue automatically handles the items added and calls them sequentially, waiting until the current item is finished before calling the next. With this, no matter how many items are triggered through scrolling, the rate that they are processed will always remain constant. Since everything happening inside a single queue, timing and controlling the flow becomes trivial by adding items into the queue at the desired position.\nMy favourite part of the whole thing is probably the ability to stop the animation by scrolling in the opposite direction, mimicking normal scrolling behaviour. The code for it is really simple yet it just works so well. While the animation might be playing for the 5th card, the index and the queue could be at the 10th card or higher, depending on scrolling speed. By adding a callback to the queue items to keeps track of the index and scroll position at the time the item was added to the queue, these references can be use to reset these values to the position for the card currently being animated, creating a seamless transition.\nThe navigation for the tabs on larger screens uses a setTimeout for the deck closing animation, this creates opportunities where a sort of race condition can occur if the navigation tabs are clicked too fast. When navigating away from the projects tab, if the animation hasn’t finished playing the first tab selected will always be render at the end of the animation, no matter which other tabs are also clicked. One way to solve this was to make it so you can’t click on another tab until the first clicked tab has loaded, but this makes the UI clunky and unresponsive. The solution I used was to keep track of the last tab clicked with an object property. By passing the object when this value is requested it will always reflect the latest tab selected(similar to the useRef hook in React). Any tab to be rendered has to match the value in this variable otherwise it will be discarded, this ensures that only the last tab selected will be rendered. …though a better method would probably be where setTimeout isn’t needed at all.\nThe overlapping card effect was surprisingly easy to implement, have one element containing all the details of the card and then have another element that wraps around this element. Set the width of the outer element to be smaller than the width of the card and the browser will take care of the rest. To implement an expanding card effect a bit of JS is needed, the width of each line of cards needs to be calculated so that there's enough space for the card to expand but not enough where an extra card can fit in. This means that the width of the overlapped card needs to be greater than half of the expanded caard, otherwise the UI will jump all over the place due to line wrapping every time a card expands."
    }
  ]
}